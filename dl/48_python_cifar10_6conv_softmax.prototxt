name: "CIFAR10_6conv"
layer {
  name: "cifar"
  type: "Python"
  top: "data"
  top: "label_hash"
  top: "label_data"
  include {
    phase: TRAIN
  }
  python_param {
    module: 'multilabel_softmax_data_layer'
    layer: 'MultilabelSoftmaxDataLayer'
    param_str: "{'phase':'TRAIN', 'width': 32, 'batch_size': 100, 'height': 32, 'n_labels': 48}"
  }
}
layer {
  name: "cifar"
  type: "Python"
  top: "data"
  top: "label_hash"
  top: "label_data"
  include {
    phase: TEST
  }
  python_param {
    module: 'multilabel_softmax_data_layer'
    layer: 'MultilabelSoftmaxDataLayer'
    param_str: "{'phase':'TEST', 'width': 32, 'batch_size': 100, 'height': 32, 'n_labels': 48}"
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "data"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 96
	group: 1
    pad: 1
    kernel_size: 3
    stride: 1
    weight_filler {
      type: "gaussian"
      std: 0.02
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "conv1"
  top: "conv1"
}
layer {
  name: "conv2"
  type: "Convolution"
  bottom: "conv1"
  top: "conv2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 96
    pad: 1
    kernel_size: 3
    stride: 1
    weight_filler {
      type: "gaussian"
      std: 0.02
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "conv2"
  top: "conv2"
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv2"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 3
    stride: 2
  }
}
layer {
  name: "dropout1"
  type: "Dropout"
  bottom: "pool1"
  top: "dropout1"
  dropout_param {
    dropout_ratio: 0.5
  }
}
layer {
  name: "conv3"
  type: "Convolution"
  bottom: "dropout1"
  top: "conv3"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 192
    pad: 1
    kernel_size: 3
    stride: 1
    weight_filler {
      type: "gaussian"
      std: 0.015
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu3"
  type: "ReLU"
  bottom: "conv3"
  top: "conv3"
}
layer {
  name: "conv4"
  type: "Convolution"
  bottom: "conv3"
  top: "conv4"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 192
    pad: 1
    kernel_size: 3
    stride: 1
    weight_filler {
      type: "gaussian"
      std: 0.015
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu4"
  type: "ReLU"
  bottom: "conv4"
  top: "conv4"
}
layer {
  name: "pool2"
  type: "Pooling"
  bottom: "conv4"
  top: "pool2"
  pooling_param {
    pool: MAX
    kernel_size: 3
    stride: 2
  }
}
layer {
  name: "dropout2"
  type: "Dropout"
  bottom: "pool2"
  top: "dropout2"
  dropout_param {
    dropout_ratio: 0.5
  }
}
layer {
  name: "conv5"
  type: "Convolution"
  bottom: "dropout2"
  top: "conv5"
  convolution_param {
    num_output: 192
	group: 1
    pad: 1
    kernel_size: 3
    stride: 1
    weight_filler {
      type: "gaussian"
      std: 0.015
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu5"
  type: "ReLU"
  bottom: "conv5"
  top: "conv5"
}
layer {
  name: "conv6"
  type: "Convolution"
  bottom: "conv5"
  top: "conv6"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 192
    pad: 1
    kernel_size: 3
    stride: 1
    weight_filler {
      type: "gaussian"
      std: 0.015
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu6"
  type: "ReLU"
  bottom: "conv6"
  top: "conv6"
}
layer {
  name: "pool3"
  type: "Pooling"
  bottom: "conv6"
  top: "pool3"
  pooling_param {
    pool: AVE
    kernel_size: 3
    stride: 2
  }
}
layer {
  name: "dropout3"
  type: "Dropout"
  bottom: "pool3"
  top: "dropout3"
  dropout_param {
    dropout_ratio: 0.5
  }
}
layer {
  name: "ip"
  type: "InnerProduct"
  bottom: "dropout3"
  top: "bn"
  param {
    lr_mult: 1
    decay_mult: 25
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 48
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
    bias_filler {
      type: "constant"
    }
  }
}
#layer {
#  name: "bn"
#  type: "BatchNorm"
#  bottom: "ip"
#  top: "bn"
#  param: { lr_mult: 0 }
#  param: { lr_mult: 0 }
#  param: { lr_mult: 0 } 
#}
layer {
  name: "hashloss_mul"
  type: "Eltwise"
  bottom: "bn"
  bottom: "label_hash"
  top: "hashloss_mul"
  eltwise_param {
    operation: PROD
  }
}
layer {
  name: "hashloss_inv"
  type: "Power"
  bottom: "hashloss_mul"
  top: "hashloss_inv"
  power_param {
    scale: -1.0
    shift: 1.0
  }
}
layer {
  name: "hashloss_crop"
  type: "ReLU"
  bottom: "hashloss_inv"
  top: "hashloss_crop"
}
layer {
  name: "hashloss_dummy_data"
  type: "DummyData"
  top: "hashloss_dummy_data"
  dummy_data_param {
    shape {
      dim : 100
      dim : 48
    }
    data_filler {
      type: "constant"
      value: 0
    }
  }
}
layer {
  name: "loss_hashloss"
  type: "EuclideanLoss"
  bottom: "hashloss_crop"
  bottom: "hashloss_dummy_data"
  top: "loss_hashloss"
  loss_weight: 0.02
}

layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "dropout3"
  top: "ip2"
  param {
    lr_mult: 1
    decay_mult: 250
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "loss_cls"
  type: "SoftmaxWithLoss"
  bottom: "ip2"
  bottom: "label_data"
  top: "loss_cls"
}
layer {
  name: "accuracy"
  type: "Accuracy"
  bottom: "ip2"
  bottom: "label_data"
  top: "accuracy"
  include {
    phase: TEST
  }
}

